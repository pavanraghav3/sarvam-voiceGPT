{"ast":null,"code":"var _jsxFileName = \"D:\\\\sarvam voice app\\\\frontend\\\\src\\\\VoiceRecorder.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VoiceRecorder = ({\n  chatId,\n  onNewMessages\n}) => {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n  const audioRef = useRef(null);\n  const startRecording = async () => {\n    audioChunksRef.current = [];\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      const mediaRecorder = new MediaRecorder(stream);\n      mediaRecorder.ondataavailable = e => {\n        if (e.data.size > 0) {\n          audioChunksRef.current.push(e.data);\n        }\n      };\n      mediaRecorder.onstop = handleAudioData;\n      mediaRecorderRef.current = mediaRecorder;\n      mediaRecorder.start();\n      setIsRecording(true);\n    } catch (err) {\n      console.error(\"Error accessing microphone:\", err);\n    }\n  };\n  const stopRecording = () => {\n    if (mediaRecorderRef.current && isRecording) {\n      mediaRecorderRef.current.stop();\n      setIsRecording(false);\n      setIsProcessing(true);\n\n      // Stop all tracks in the stream\n      mediaRecorderRef.current.stream.getTracks().forEach(track => track.stop());\n    }\n  };\n  const handleAudioData = async () => {\n    const audioBlob = new Blob(audioChunksRef.current, {\n      type: \"audio/wav\"\n    });\n    const formData = new FormData();\n    formData.append(\"file\", audioBlob);\n    if (chatId) formData.append(\"chat_id\", chatId);\n    try {\n      const response = await axios.post(\"http://localhost:5000/process-voice\", formData);\n      const data = response.data;\n\n      // Build message objects with audio\n      const userMsg = {\n        role: \"user\",\n        content: data.userText,\n        timestamp: new Date().toISOString(),\n        audio: data.userAudio // <-- include user audio\n      };\n      const assistantMsg = {\n        role: \"assistant\",\n        content: data.responseText,\n        timestamp: new Date().toISOString(),\n        audio: data.responseAudio // <-- include assistant TTS audio\n      };\n\n      // Update chat in parent\n      onNewMessages(userMsg, assistantMsg);\n\n      // Play assistant's audio\n      const audioSrc = `data:audio/wav;base64,${data.responseAudio}`;\n      if (audioRef.current) {\n        audioRef.current.src = audioSrc;\n        audioRef.current.play();\n      }\n    } catch (error) {\n      console.error(\"Error processing voice:\", error);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"voice-recorder-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"voice-btn-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: isRecording ? stopRecording : startRecording,\n        disabled: isProcessing,\n        className: `voice-btn ${isRecording ? \"recording\" : \"\"}`,\n        children: isRecording ? \"Stop Recording\" : \"Start Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), isRecording && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recording-sign\",\n        children: \"Recording...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this), isProcessing && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Processing your request...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef,\n      style: {\n        display: \"none\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_s(VoiceRecorder, \"Okvdw3ibPQ305YJCVYpEhNfRdms=\");\n_c = VoiceRecorder;\nexport default VoiceRecorder;\nvar _c;\n$RefreshReg$(_c, \"VoiceRecorder\");","map":{"version":3,"names":["React","useState","useRef","axios","jsxDEV","_jsxDEV","VoiceRecorder","chatId","onNewMessages","_s","isRecording","setIsRecording","isProcessing","setIsProcessing","mediaRecorderRef","audioChunksRef","audioRef","startRecording","current","stream","navigator","mediaDevices","getUserMedia","audio","mediaRecorder","MediaRecorder","ondataavailable","e","data","size","push","onstop","handleAudioData","start","err","console","error","stopRecording","stop","getTracks","forEach","track","audioBlob","Blob","type","formData","FormData","append","response","post","userMsg","role","content","userText","timestamp","Date","toISOString","userAudio","assistantMsg","responseText","responseAudio","audioSrc","src","play","className","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","ref","style","display","_c","$RefreshReg$"],"sources":["D:/sarvam voice app/frontend/src/VoiceRecorder.tsx"],"sourcesContent":["import React, { useState, useRef } from \"react\";\r\nimport axios from \"axios\";\r\n\r\ninterface Message {\r\n  role: \"user\" | \"assistant\";\r\n  content: string;\r\n  timestamp: string;\r\n  audio?: string; // Optional base64 audio string\r\n}\r\n\r\ninterface VoiceRecorderProps {\r\n  chatId: string | null;\r\n  onNewMessages: (userMsg: Message, assistantMsg: Message) => void;\r\n}\r\n\r\nconst VoiceRecorder: React.FC<VoiceRecorderProps> = ({ chatId, onNewMessages }) => {\r\n  const [isRecording, setIsRecording] = useState<boolean>(false);\r\n  const [isProcessing, setIsProcessing] = useState<boolean>(false);\r\n  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\r\n  const audioChunksRef = useRef<Blob[]>([]);\r\n  const audioRef = useRef<HTMLAudioElement | null>(null);\r\n\r\n  const startRecording = async () => {\r\n    audioChunksRef.current = [];\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n      const mediaRecorder = new MediaRecorder(stream);\r\n\r\n      mediaRecorder.ondataavailable = (e) => {\r\n        if (e.data.size > 0) {\r\n          audioChunksRef.current.push(e.data);\r\n        }\r\n      };\r\n\r\n      mediaRecorder.onstop = handleAudioData;\r\n\r\n      mediaRecorderRef.current = mediaRecorder;\r\n      mediaRecorder.start();\r\n      setIsRecording(true);\r\n    } catch (err) {\r\n      console.error(\"Error accessing microphone:\", err);\r\n    }\r\n  };\r\n\r\n  const stopRecording = () => {\r\n    if (mediaRecorderRef.current && isRecording) {\r\n      mediaRecorderRef.current.stop();\r\n      setIsRecording(false);\r\n      setIsProcessing(true);\r\n\r\n      // Stop all tracks in the stream\r\n      mediaRecorderRef.current.stream\r\n        .getTracks()\r\n        .forEach((track) => track.stop());\r\n    }\r\n  };\r\n\r\n  const handleAudioData = async () => {\r\n    const audioBlob = new Blob(audioChunksRef.current, { type: \"audio/wav\" });\r\n    const formData = new FormData();\r\n    formData.append(\"file\", audioBlob);\r\n    if (chatId) formData.append(\"chat_id\", chatId);\r\n\r\n    try {\r\n      const response = await axios.post(\r\n        \"http://localhost:5000/process-voice\",\r\n        formData\r\n      );\r\n      const data = response.data;\r\n\r\n      // Build message objects with audio\r\n      const userMsg: Message = {\r\n        role: \"user\",\r\n        content: data.userText,\r\n        timestamp: new Date().toISOString(),\r\n        audio: data.userAudio, // <-- include user audio\r\n      };\r\n      const assistantMsg: Message = {\r\n        role: \"assistant\",\r\n        content: data.responseText,\r\n        timestamp: new Date().toISOString(),\r\n        audio: data.responseAudio, // <-- include assistant TTS audio\r\n      };\r\n\r\n      // Update chat in parent\r\n      onNewMessages(userMsg, assistantMsg);\r\n\r\n      // Play assistant's audio\r\n      const audioSrc = `data:audio/wav;base64,${data.responseAudio}`;\r\n      if (audioRef.current) {\r\n        audioRef.current.src = audioSrc;\r\n        audioRef.current.play();\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error processing voice:\", error);\r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"voice-recorder-container\">\r\n      <div className=\"voice-btn-center\">\r\n        <button\r\n          onClick={isRecording ? stopRecording : startRecording}\r\n          disabled={isProcessing}\r\n          className={`voice-btn ${isRecording ? \"recording\" : \"\"}`}\r\n        >\r\n          {isRecording ? \"Stop Recording\" : \"Start Recording\"}\r\n        </button>\r\n        {isRecording && (\r\n          <div className=\"recording-sign\">Recording...</div>\r\n        )}\r\n        {isProcessing && <p>Processing your request...</p>}\r\n      </div>\r\n      <audio ref={audioRef} style={{ display: \"none\" }} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VoiceRecorder;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC/C,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAc1B,MAAMC,aAA2C,GAAGA,CAAC;EAAEC,MAAM;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EACjF,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAU,KAAK,CAAC;EAC9D,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAU,KAAK,CAAC;EAChE,MAAMa,gBAAgB,GAAGZ,MAAM,CAAuB,IAAI,CAAC;EAC3D,MAAMa,cAAc,GAAGb,MAAM,CAAS,EAAE,CAAC;EACzC,MAAMc,QAAQ,GAAGd,MAAM,CAA0B,IAAI,CAAC;EAEtD,MAAMe,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjCF,cAAc,CAACG,OAAO,GAAG,EAAE;IAC3B,IAAI;MACF,MAAMC,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;QAAEC,KAAK,EAAE;MAAK,CAAC,CAAC;MACzE,MAAMC,aAAa,GAAG,IAAIC,aAAa,CAACN,MAAM,CAAC;MAE/CK,aAAa,CAACE,eAAe,GAAIC,CAAC,IAAK;QACrC,IAAIA,CAAC,CAACC,IAAI,CAACC,IAAI,GAAG,CAAC,EAAE;UACnBd,cAAc,CAACG,OAAO,CAACY,IAAI,CAACH,CAAC,CAACC,IAAI,CAAC;QACrC;MACF,CAAC;MAEDJ,aAAa,CAACO,MAAM,GAAGC,eAAe;MAEtClB,gBAAgB,CAACI,OAAO,GAAGM,aAAa;MACxCA,aAAa,CAACS,KAAK,CAAC,CAAC;MACrBtB,cAAc,CAAC,IAAI,CAAC;IACtB,CAAC,CAAC,OAAOuB,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,6BAA6B,EAAEF,GAAG,CAAC;IACnD;EACF,CAAC;EAED,MAAMG,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAIvB,gBAAgB,CAACI,OAAO,IAAIR,WAAW,EAAE;MAC3CI,gBAAgB,CAACI,OAAO,CAACoB,IAAI,CAAC,CAAC;MAC/B3B,cAAc,CAAC,KAAK,CAAC;MACrBE,eAAe,CAAC,IAAI,CAAC;;MAErB;MACAC,gBAAgB,CAACI,OAAO,CAACC,MAAM,CAC5BoB,SAAS,CAAC,CAAC,CACXC,OAAO,CAAEC,KAAK,IAAKA,KAAK,CAACH,IAAI,CAAC,CAAC,CAAC;IACrC;EACF,CAAC;EAED,MAAMN,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,MAAMU,SAAS,GAAG,IAAIC,IAAI,CAAC5B,cAAc,CAACG,OAAO,EAAE;MAAE0B,IAAI,EAAE;IAAY,CAAC,CAAC;IACzE,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEL,SAAS,CAAC;IAClC,IAAInC,MAAM,EAAEsC,QAAQ,CAACE,MAAM,CAAC,SAAS,EAAExC,MAAM,CAAC;IAE9C,IAAI;MACF,MAAMyC,QAAQ,GAAG,MAAM7C,KAAK,CAAC8C,IAAI,CAC/B,qCAAqC,EACrCJ,QACF,CAAC;MACD,MAAMjB,IAAI,GAAGoB,QAAQ,CAACpB,IAAI;;MAE1B;MACA,MAAMsB,OAAgB,GAAG;QACvBC,IAAI,EAAE,MAAM;QACZC,OAAO,EAAExB,IAAI,CAACyB,QAAQ;QACtBC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QACnCjC,KAAK,EAAEK,IAAI,CAAC6B,SAAS,CAAE;MACzB,CAAC;MACD,MAAMC,YAAqB,GAAG;QAC5BP,IAAI,EAAE,WAAW;QACjBC,OAAO,EAAExB,IAAI,CAAC+B,YAAY;QAC1BL,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QACnCjC,KAAK,EAAEK,IAAI,CAACgC,aAAa,CAAE;MAC7B,CAAC;;MAED;MACApD,aAAa,CAAC0C,OAAO,EAAEQ,YAAY,CAAC;;MAEpC;MACA,MAAMG,QAAQ,GAAG,yBAAyBjC,IAAI,CAACgC,aAAa,EAAE;MAC9D,IAAI5C,QAAQ,CAACE,OAAO,EAAE;QACpBF,QAAQ,CAACE,OAAO,CAAC4C,GAAG,GAAGD,QAAQ;QAC/B7C,QAAQ,CAACE,OAAO,CAAC6C,IAAI,CAAC,CAAC;MACzB;IACF,CAAC,CAAC,OAAO3B,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD,CAAC,SAAS;MACRvB,eAAe,CAAC,KAAK,CAAC;IACxB;EACF,CAAC;EAED,oBACER,OAAA;IAAK2D,SAAS,EAAC,0BAA0B;IAAAC,QAAA,gBACvC5D,OAAA;MAAK2D,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAC/B5D,OAAA;QACE6D,OAAO,EAAExD,WAAW,GAAG2B,aAAa,GAAGpB,cAAe;QACtDkD,QAAQ,EAAEvD,YAAa;QACvBoD,SAAS,EAAE,aAAatD,WAAW,GAAG,WAAW,GAAG,EAAE,EAAG;QAAAuD,QAAA,EAExDvD,WAAW,GAAG,gBAAgB,GAAG;MAAiB;QAAA0D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7C,CAAC,EACR7D,WAAW,iBACVL,OAAA;QAAK2D,SAAS,EAAC,gBAAgB;QAAAC,QAAA,EAAC;MAAY;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAClD,EACA3D,YAAY,iBAAIP,OAAA;QAAA4D,QAAA,EAAG;MAA0B;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/C,CAAC,eACNlE,OAAA;MAAOmE,GAAG,EAAExD,QAAS;MAACyD,KAAK,EAAE;QAAEC,OAAO,EAAE;MAAO;IAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjD,CAAC;AAEV,CAAC;AAAC9D,EAAA,CAvGIH,aAA2C;AAAAqE,EAAA,GAA3CrE,aAA2C;AAyGjD,eAAeA,aAAa;AAAC,IAAAqE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}